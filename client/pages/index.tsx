import Head from "next/head";

import {
  Button,
  Heading,
  HStack,
  Input,
  Link,
  Stack,
  Text,
  useToast,
} from "@chakra-ui/react";
import { BigLogo } from "@/assets/logos/BigLogo";
import { ConnectButton, useConnectModal } from "@rainbow-me/rainbowkit";
import { useState } from "react";
import {
  useAccount,
  useContractEvent,
  useContractRead,
  useContractWrite,
} from "wagmi";
import contractAbi from "../utils/contractABI.json";
import { ethers } from "ethers";
import { WalletIcon } from "@/assets/icons/Walleticon";
import confetti from 'canvas-confetti';
import { FooterHome } from "@/components/footer/FooterHome";

const origin = typeof window === "undefined" ? "" : window.location.origin;
const bgImageDesktop = `${origin}/home-desktop.png`;
const bgImageTablet = `${origin}/home-tablet.png`;
const bgImageMobile = `${origin}/home-mobile.png`;

export default function Home() {
  const [handle, sethandle] = useState("");
  const price =
    handle.length === 3 ? "0.5" : handle.length === 4 ? "0.3" : "0.1";
  const toast = useToast();
  const [claiming, setclaiming] = useState(false);
  const { openConnectModal } = useConnectModal();
  const { isConnected } = useAccount();

  const { write: writeRegister } = useContractWrite({
    mode: "recklesslyUnprepared",
    address: "0x47B52e28d9831d95c31b6C14c6fe569357D4E995",
    abi: contractAbi.abi,
    functionName: "register",
    args: [handle],
    overrides: {
      value: ethers.utils.parseEther(price),
    },
  });

  const { data, isError, isLoading } = useContractRead({
    address: "0x47B52e28d9831d95c31b6C14c6fe569357D4E995",
    abi: contractAbi.abi,
    functionName: "ValidHandle",
    args: [handle],
    onSuccess(data) {
      console.log("Success", data);
    },
  });

  useContractEvent({
    address: "0x47B52e28d9831d95c31b6C14c6fe569357D4E995",
    abi: contractAbi.abi,
    eventName: "NewRegisteredDomain",
    listener(_from, _domain, _amount: any) {
      setclaiming(false);
      sethandle("");
      let msg = `The domain ${_domain} was registered with the address ${_from}`;
      toast({
        title: "Domain Register.",
        description: msg,
        status: "success",
        duration: 9000,
        isClosable: true,
      });
      confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 }
      });
    },
  });

  const onClickRegister = () => {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    if (writeRegister) {
      writeRegister();
      setclaiming(true);
    }
  };

  

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Stack
        backgroundImage={[bgImageMobile, bgImageTablet, bgImageDesktop]}
        bgRepeat="no-repeat"
        bgSize="cover"
        bgPosition="center"
        backgroundColor={"black"}
        height={"100vh"}
      >
        <HStack m={5} justify={"flex-end"}>
          {isConnected ? (
            <ConnectButton />
          ) : (
            <Button
              onClick={openConnectModal}
              leftIcon={<WalletIcon />}
              bgGradient={"linear(to-r, #FF692D, #E856E0, #4D67FA)"}
              borderRadius={"50px"}
              p={"0px 20px"}
              color={"white"}
              boxShadow={"0px 4px 20px 0px rgba(0, 0, 0, 0.25)"}
            >
              Connect Wallet
            </Button>
          )}
        </HStack>
        <Stack height={"100%"} justify={"center"} alignItems={"center"}>
          <>
            <BigLogo />
            <Heading
              textShadow={"0px 4px 20px #000000"}
              color={"#FFFFFF"}
              fontWeight={700}
              fontSize={["22px", "35px"]}
              pt={["17px", "27px"]}
            >
              Elevate your web3 presence
            </Heading>
            <Text
              fontWeight={400}
              fontSize={["12px", "16px"]}
              pt={["15px", "27px"]}
              pb={["18px", "47px"]}
              color={"#FFFFFF"}
            >
              âœ¨Claim your unique Linkme
            </Text>
            {!claiming && (
              <HStack
                p={["0 6px", "0 30px 0 25px"]}
                w={["206px", "347px"]}
                h={["28px", "48px"]}
                background={"#FFFFFF"}
                borderRadius={"100px"}
                boxShadow={"0px 4px 4px rgba(0, 0, 0.25)"}
                alignContent={"space-between"}
              >
                <Text
                  fontWeight={600}
                  fontSize={["12px", "14px"]}
                  bgClip="text"
                  bgGradient="linear(to-r, rgba(255, 105, 45, 1), rgba(232, 86, 224, 1), rgba(77, 103, 250, 1))"
                >
                  Link.me/
                </Text>
                <Input
                  textColor={"black"}
                  w={"auto"}
                  h={"autp"}
                  onChange={(e: any) => sethandle(e.target.value)}
                />
              </HStack>
            )}
            {data && handle !== "" && handle.length >= 3 && (
              <Stack     pt={10}>
              <Button
                onClick={onClickRegister}
                loadingText="Claiming"
                bgGradient={"linear(to-r, #FF692D, #E856E0, #4D67FA)"}
                borderRadius={"50px"}
                p={"0px 20px"}
                color={"white"}
                boxShadow={"0px 4px 20px 0px rgba(0, 0, 0, 0.25)"}
                isLoading={claiming}
              >
                Claim
              </Button>
              </Stack>
            )}
          </>
        </Stack>
        <HStack p={10} justify={"flex-end"}>
          <Stack w={'159px'} h={'41px'} borderRadius={'100px'}  bgGradient="linear(to-r,  rgba(240, 248, 255, 0.79) 0%, rgba(232, 251, 247, 0.31) 57.44%, rgba(252, 254, 255, 0.57) )" boxShadow={"0px 4px 4px rgba(0, 0, 0, 0.25)"} justify={'center'} align={'center'}> 

          <Link
            isExternal
            href="https://testnets.opensea.io/es/collection/linkme-2"
            fontWeight={400}
            fontSize={'16px'}
            color={'white'}
          >
            View on OpenSea
          </Link>
          </Stack>
        </HStack>
        <FooterHome />
      </Stack>
    </>
  );
}
